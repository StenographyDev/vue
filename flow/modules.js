 /*
 This code is doing two things. 
 First, it's escaping the html tags so that they don't get interpreted as HTML code. 
 Second, it's decoding the escaped string to make sure that we're getting back what we put in there originally.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
declare module 'he' {
  declare function escape(html: string): string;
  declare function decode(html: string): string;
}

 /*
 This code is generating a source map for the given file. 
 It's using the `SourceMapGenerator` class to create a new instance of it, 
 and then calling its `setSourceContent()` method with the filename and content as arguments. 
 Then we call its `addMapping()` method with an object containing all of our mappings (line numbers, column numbers). 
 Finally we use that string representation of the source map to write it out to disk in JSON format.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
declare module 'source-map' {
  declare class SourceMapGenerator {
    setSourceContent(filename: string, content: string): void;
    addMapping(mapping: Object): void;
    toString(): string;
  }
  declare class SourceMapConsumer {
    constructor (map: Object): void;
    originalPositionFor(position: { line: number; column: number; }): {
      source: ?string;
      line: ?number;
      column: ?number;
    };
  }
}

declare module 'lru-cache' {
  declare var exports: {
    (): any
  }
}

 /*
 This code is taking a string and returning the same string with all of its characters reversed
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
declare module 'de-indent' {
  declare var exports: {
    (input: string): string
  }
}

 /*
 This code is taking a string and an options object. 
 The options object has a boolean property called `isJSON`. 
 If the value of this property is true, then it will return the JSON version of the input string. 
 Otherwise, it will return the original string.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
declare module 'serialize-javascript' {
  declare var exports: {
    (input: string, options: { isJSON: boolean }): string
  }
}

 /*
 This code is a function that takes two arguments,
 the input string and an object with properties interpolate and escape. 
 The interpolate property is a regular expression to match variables in the input string. 
 The escape property is another regular expression to match escaped variables (i.e., those prefixed by `\`).
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
declare module 'lodash.template' {
  declare var exports: {
    (input: string, options: { interpolate: RegExp, escape: RegExp }): Function
  }
}
