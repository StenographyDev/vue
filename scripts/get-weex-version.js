const coreVersion = require('../package.json').version
const weexVersion = require('../packages/weex-vue-framework/package.json').version
let weexBaseVersion = weexVersion.match(/^[\d.]+/)[0]
let weexSubVersion = Number(weexVersion.match(/-weex\.(\d+)$/)[1])

 /*
 This code is doing two things.
 First, it checks if the weexBaseVersion and coreVersion are equal or not. If they're not equal, then we reset the sub version to 1. Otherwise, increment the sub version by one.
 This code also sets a global variable called `weexSubVersion` which will be used in other parts of this project to determine whether there's a new update available for Weex Core or not.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
if (weexBaseVersion === coreVersion) {
  // same core version, increment sub version
  weexSubVersion++
} else {
  // new core version, reset sub version
  weexBaseVersion = coreVersion
  weexSubVersion = 1
}

 /*
 This code is doing two things.
 First, it will check if the second argument of process.argv is c or not. If yes, then print out weexVersion to console; otherwise, print out weexBaseVersion + 'weex.' + weexSubVersion to console.
 Second, this code also checks if there are any other arguments after the first one (process.argv[2]).
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
if (process.argv[2] === '-c') {
  console.log(weexVersion)
} else {
  console.log(weexBaseVersion + '-weex.' + weexSubVersion)
}

module.exports = {
  base: weexBaseVersion,
  sub: weexSubVersion
}
