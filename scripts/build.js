const fs = require('fs')
const path = require('path')
const zlib = require('zlib')
const rollup = require('rollup')
const terser = require('terser')

 /*
 This code is creating a directory called dist if it doesn't already exist.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
if (!fs.existsSync('dist')) {
  fs.mkdirSync('dist')
}

let builds = require('./config').getAllBuilds()

// filter builds via command line arg
 /*
 This code is filtering out builds that don't contain the string 'weex' in their output file name.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
if (process.argv[2]) {
  const filters = process.argv[2].split(',')
  builds = builds.filter(b => {
    return filters.some(f => b.output.file.indexOf(f) > -1 || b._name.indexOf(f) > -1)
  })
} else {
  // filter out weex builds by default
  builds = builds.filter(b => {
    return b.output.file.indexOf('weex') === -1
  })
}

build(builds)

 /*
 This code is iterating over an array of builds and calling the buildEntry function on each element.
 The buildEntry function takes a single argument, which is the current element in the array. 
 It returns a promise that resolves when it's done building that entry.
 It then increments `built` by one and calls itself again if there are more entries to be built.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
function build (builds) {
  let built = 0
  const total = builds.length
  const next = () => {
    buildEntry(builds[built]).then(() => {
      built++
      if (built < total) {
        next()
      }
    }).catch(logError)
  }

  next()
}

 /*
 This code is doing the following.
  It's importing rollup and terser from node_modules.
  It's creating a bundle using the config object that was passed in as an argument to this function.
  Then it generates code for each output file, which are then written to disk with write().
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
function buildEntry (config) {
  const output = config.output
  const { file, banner } = output
  const isProd = /(min|prod)\.js$/.test(file)
  return rollup.rollup(config)
    .then(bundle => bundle.generate(output))
    .then(({ output: [{ code }] }) => {
      if (isProd) {
        const minified = (banner ? banner + '\n' : '') + terser.minify(code, {
          toplevel: true,
          output: {
            ascii_only: true
          },
          compress: {
            pure_funcs: ['makeMap']
          }
        }).code
        return write(file, minified, true)
      } else {
        return write(file, code)
      }
    })
}

 /*
 This code is taking the code from `src/index.js` and writing it to a file called `dist/bundle.js`.
 The first line of this function is saying that we are going to write a file, so we're using the fs module's [writeFile()] method.
 This takes two arguments, the path to where you want your file written (the second argument), 
 and then what you want written into that file (the third argument).
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
function write (dest, code, zip) {
  return new Promise((resolve, reject) => {
    function report (extra) {
      console.log(blue(path.relative(process.cwd(), dest)) + ' ' + getSize(code) + (extra || ''))
      resolve()
    }

    fs.writeFile(dest, code, err => {
      if (err) return reject(err)
      if (zip) {
        zlib.gzip(code, (err, zipped) => {
          if (err) return reject(err)
          report(' (gzipped: ' + getSize(zipped) + ')')
        })
      } else {
        report()
      }
    })
  })
}

 /*
 This code is taking the code from the input box and converting it to a string. 
 Then, it's splitting that string into an array of characters. 
 It then loops through each character in the array and adds 1 to its ASCII value if it's not already greater than 127 (the highest number for a singlebyte UTF8 character).
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
function getSize (code) {
  return (code.length / 1024).toFixed(2) + 'kb'
}

function logError (e) {
  console.log(e)
}

 /*
 This code is setting the color to blue and then printing out a string.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
function blue (str) {
  return '\x1b[1m\x1b[34m' + str + '\x1b[39m\x1b[22m'
}
