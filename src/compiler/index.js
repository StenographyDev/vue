/* @flow */

import { parse } from './parser/index'
import { optimize } from './optimizer'
import { generate } from './codegen/index'
import { createCompilerCreator } from './create-compiler'

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
 /*
 This code is doing the following things.
  Parsing the template string into an AST (abstract syntax tree)
  Optimizing the AST if optimize option is set to true in CompilerOptions object. This will remove unnecessary nodes and reduce code size by removing unused expressions, statements etc.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
export const createCompiler = createCompilerCreator(function baseCompile (
  template: string,
  options: CompilerOptions
): CompiledResult {
  const ast = parse(template.trim(), options)
  if (options.optimize !== false) {
    optimize(ast, options)
  }
  const code = generate(ast, options)
  return {
    ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
})
