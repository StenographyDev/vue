/* @flow */

import config from '../config'
import Watcher from '../observer/watcher'
import Dep, { pushTarget, popTarget } from '../observer/dep'
import { isUpdatingChildComponent } from './lifecycle'

import {
  set,
  del,
  observe,
  defineReactive,
  toggleObserving
} from '../observer/index'

import {
  warn,
  bind,
  noop,
  hasOwn,
  hyphenate,
  isReserved,
  handleError,
  nativeWatch,
  validateProp,
  isPlainObject,
  isServerRendering,
  isReservedAttribute,
  invokeWithErrorHandling
} from '../util/index'

const sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
}

 /*
 This code is creating a proxy object that will be used to access the properties of the target object.
 The getter and setter functions are defined in sharedPropertyDefinition, which is then passed into Object.defineProperty() as an argument for each property on the target object.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
export function proxy (target: Object, sourceKey: string, key: string) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  }
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}

 /*
 This code is initializing the watchers for a component.
 The `initWatch` function takes in two arguments, the first one being the vm and second one being an object containing all of our watch functions.
 We iterate over each key/value pair in this object and call `vm.$watch(key, value)`. The first argument to $watch is a string that represents what we want to watch (in this case it's "a").
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
export function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  if (opts.props) initProps(vm, opts.props)
  if (opts.methods) initMethods(vm, opts.methods)
  if (opts.data) {
    initData(vm)
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  if (opts.computed) initComputed(vm, opts.computed)
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}

 /*
 This code is doing the following.
  It's creating a new object called `props` and assigning it to vm._props on the component instance.
  The code then iterates over all of the props in propsOptions, which are passed into initProps as an argument.
    For each key in propsOptions, we create a reactive property on `vm._props`, using defineReactive() from core/observer/index.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function initProps (vm: Component, propsOptions: Object) {
  const propsData = vm.$options.propsData || {}
  const props = vm._props = {}
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  const keys = vm.$options._propKeys = []
  const isRoot = !vm.$parent
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false)
  }
  for (const key in propsOptions) {
    keys.push(key)
    const value = validateProp(key, propsOptions, propsData, vm)
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      const hyphenatedKey = hyphenate(key)
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          `"${hyphenatedKey}" is a reserved attribute and cannot be used as component prop.`,
          vm
        )
      }
      defineReactive(props, key, value, () => {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            `Avoid mutating a prop directly since the value will be ` +
            `overwritten whenever the parent component re-renders. ` +
            `Instead, use a data or computed property based on the prop's ` +
            `value. Prop being mutated: "${key}"`,
            vm
          )
        }
      })
    } else {
      defineReactive(props, key, value)
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, `_props`, key)
    }
  }
  toggleObserving(true)
}

 /*
 This code is setting up the data object for a component. It's doing this by checking if the user has passed in a function as their data, and then calling that function to get the actual data object. If they didn't pass in a function, it will just return whatever was passed into it (which should be an object).
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function initData (vm: Component) {
  let data = vm.$options.data
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {}
  if (!isPlainObject(data)) {
    data = {}
    process.env.NODE_ENV !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    )
  }
  // proxy data on instance
  const keys = Object.keys(data)
  const props = vm.$options.props
  const methods = vm.$options.methods
  let i = keys.length
  while (i--) {
    const key = keys[i]
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn(
          `Method "${key}" has already been defined as a data property.`,
          vm
        )
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn(
        `The data property "${key}" is already declared as a prop. ` +
        `Use prop default value instead.`,
        vm
      )
    } else if (!isReserved(key)) {
      proxy(vm, `_data`, key)
    }
  }
  // observe data
  observe(data, true /* asRootData */)
}

 /*
 This code is doing the following.
  It's pushing a new target onto the call stack, which means that any data getters will be called with this VM as their `this` context.
  The code then calls the function passed in to it (in this case, `data`) and passes in its own argument (the VM). This allows us to use our component instance as an argument for our data getter function.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
export function getData (data: Function, vm: Component): any {
  // #7573 disable dep collection when invoking data getters
  pushTarget()
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, `data()`)
    return {}
  } finally {
    popTarget()
  }
}

const computedWatcherOptions = { lazy: true }

 /*
 This code is creating a new object called `watchers` on the component instance. This object will be used to store all of our watcher instances for computed properties.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function initComputed (vm: Component, computed: Object) {
  // $flow-disable-line
  const watchers = vm._computedWatchers = Object.create(null)
  // computed properties are just getters during SSR
  const isSSR = isServerRendering()

  for (const key in computed) {
    const userDef = computed[key]
    const getter = typeof userDef === 'function' ? userDef : userDef.get
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        `Getter is missing for computed property "${key}".`,
        vm
      )
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      )
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef)
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(`The computed property "${key}" is already defined in data.`, vm)
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(`The computed property "${key}" is already defined as a prop.`, vm)
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn(`The computed property "${key}" is already defined as a method.`, vm)
      }
    }
  }
}

 /*
 This code is creating a computed property on the target object.
 The first argument to defineComputed is the target object, which in this case is `this`.
 The second argument is the key that we want to create a computed property for. In this case it's `name`.
 The third argument is an object or function that defines how we want our computed property to work.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
export function defineComputed (
  target: any,
  key: string,
  userDef: Object | Function
) {
  const shouldCache = !isServerRendering()
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef)
    sharedPropertyDefinition.set = noop
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop
    sharedPropertyDefinition.set = userDef.set || noop
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        `Computed property "${key}" was assigned to but it has no setter.`,
        this
      )
    }
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}

 /*
 This code is creating a getter function for the computed property. The key argument passed to this function is the name of the computed property, and it's value will be used as a key in an object that stores all of our watchers.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function createComputedGetter (key) {
  return function computedGetter () {
    const watcher = this._computedWatchers && this._computedWatchers[key]
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate()
      }
      if (Dep.target) {
        watcher.depend()
      }
      return watcher.value
    }
  }
}

 /*
 This code is creating a function that takes in a function and returns another function.
 The returned function will be called on the object it was created with, which is `this`.
 This allows us to call the passedin function with `this` as an argument.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

 /*
 This code is setting the methods on the vm object. The first part of this code is checking to see if there are any methods in the component definition that have already been defined as props, and if so, it warns you about them.
 The second part of this code checks to see if a method has already been defined on an instance (vm) by looking at its own properties.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function initMethods (vm: Component, methods: Object) {
  const props = vm.$options.props
  for (const key in methods) {
    if (process.env.NODE_ENV !== 'production') {
      if (typeof methods[key] !== 'function') {
        warn(
          `Method "${key}" has type "${typeof methods[key]}" in the component definition. ` +
          `Did you reference the function correctly?`,
          vm
        )
      }
      if (props && hasOwn(props, key)) {
        warn(
          `Method "${key}" has already been defined as a prop.`,
          vm
        )
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          `Method "${key}" conflicts with an existing Vue instance method. ` +
          `Avoid defining component methods that start with _ or $.`
        )
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm)
  }
}

 /*
 This code is creating a watcher for each key in the watch object.
 The handler can be an array of functions or just one function.
 If it's an array, then we loop through and call createWatcher on each element in the array.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function initWatch (vm: Component, watch: Object) {
  for (const key in watch) {
    const handler = watch[key]
    if (Array.isArray(handler)) {
      for (let i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i])
      }
    } else {
      createWatcher(vm, key, handler)
    }
  }
}

 /*
 This code is creating a watcher for the vm.
 The first argument is an expression or function that will be watched, and the second argument is a handler which can be either a string or function.
 If it's a string, then we're going to look up the property on our vm object with that name and assign it to `handler`.
 If it's not a string, then we'll just use whatever value was passed in as `handler` (which could also be another function).
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
function createWatcher (
  vm: Component,
  expOrFn: string | Function,
  handler: any,
  options?: Object
) {
  if (isPlainObject(handler)) {
    options = handler
    handler = handler.handler
  }
  if (typeof handler === 'string') {
    handler = vm[handler]
  }
  return vm.$watch(expOrFn, handler, options)
}

export function stateMixin (Vue: Class<Component>) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  const dataDef = {}
  dataDef.get = function () { return this._data }
  const propsDef = {}
  propsDef.get = function () { return this._props }
  if (process.env.NODE_ENV !== 'production') {
 /*
 This code is checking to see if the instance root $data has been replaced. If it has, then we want to warn the user that they should use nested data properties instead of replacing the root $data object.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      )
    }
 /*
 This code is setting the `$props` variable to be readonly.
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
    propsDef.set = function () {
      warn(`$props is readonly.`, this)
    }
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef)
  Object.defineProperty(Vue.prototype, '$props', propsDef)

  Vue.prototype.$set = set
  Vue.prototype.$delete = del

 /*
 This code is creating a watcher. The first argument to the Watcher constructor is the vm, which in this case is `this`.
 The second argument to the Watcher constructor is an expression or function that we want to watch for changes. In our example, it's `expOrFn`, and it's a string or function.
 The third argument of the Watcher constructor is a callback that will be called when there are changes in our watched value(s).
 - generated by stenography autopilot [ üöóüë©‚Äç‚úàÔ∏è ] 
 */
  Vue.prototype.$watch = function (
    expOrFn: string | Function,
    cb: any,
    options?: Object
  ): Function {
    const vm: Component = this
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {}
    options.user = true
    const watcher = new Watcher(vm, expOrFn, cb, options)
    if (options.immediate) {
      const info = `callback for immediate watcher "${watcher.expression}"`
      pushTarget()
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info)
      popTarget()
    }
    return function unwatchFn () {
      watcher.teardown()
    }
  }
}
