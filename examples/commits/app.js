/* global Vue */

var apiURL = 'https://api.github.com/repos/vuejs/vue/commits?per_page=3&sha='

/**
 * Actual demo
 */

new Vue({

  el: '#demo',

  data: {
    branches: ['master', 'dev'],
    currentBranch: 'master',
    commits: null
  },

  created: function () {
    this.fetchData()
  },

  watch: {
    currentBranch: 'fetchData'
  },

  filters: {
 /*
 This code is taking the first line of a string and returning it.
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
    truncate: function (v) {
      var newline = v.indexOf('\n')
      return newline > 0 ? v.slice(0, newline) : v
    },
 /*
 This code is taking the string T or Z and replacing it with a space
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
    formatDate: function (v) {
      return v.replace(/T|Z/g, ' ')
    }
  },

  methods: {
 /*
 This code is getting the commits from the API and storing them in a variable called 
 commits The first line of code checks to see if we are running on Phantom JS. If 
 so it will use mocks instead of making an actual request. If not it will make a request 
 for the data using XML Http Request. The second line sets up an anonymous function 
 that calls another function when loaded(`onload`)
 - generated by stenography autopilot [ 🚗👩‍✈️ ] 
 */
    fetchData: function () {
      var self = this
      if (navigator.userAgent.indexOf('PhantomJS') > -1) {
        // use mocks in e2e to avoid dependency on network / authentication
        setTimeout(function () {
          self.commits = window.MOCKS[self.currentBranch]
        }, 0)
      } else {
        var xhr = new XMLHttpRequest()
        xhr.open('GET', apiURL + self.currentBranch)
        xhr.onload = function () {
          self.commits = JSON.parse(xhr.responseText)
          console.log(self.commits[0].html_url)
        }
        xhr.send()
      }
    }
  }
})
